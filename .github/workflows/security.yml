name: Security Audit

on:
  schedule:
    - cron: "0 0 * * 1" # Every Monday at midnight
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

jobs:
  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest

    strategy:
      matrix:
        directory: ["server", "client"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "${{ matrix.directory }}/package-lock.json"

      - name: Install dependencies
        run: |
          cd ${{ matrix.directory }}
          npm ci

      - name: Run npm audit
        run: |
          cd ${{ matrix.directory }}
          npm audit --audit-level=moderate --json > audit-results.json || true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-${{ matrix.directory }}
          path: ${{ matrix.directory }}/audit-results.json

      - name: Check for high/critical vulnerabilities
        run: |
          cd ${{ matrix.directory }}
          HIGH_VULNS=$(npm audit --audit-level=high --json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(npm audit --audit-level=critical --json | jq '.metadata.vulnerabilities.critical // 0')

          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"

          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found!"
            exit 1
          fi

  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    outputs:
      token_available: ${{ steps.snyk-token.outputs.token }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Check for Snyk token
        id: snyk-token
        env:
          HAS_TOKEN: ${{ secrets.SNYK_TOKEN != '' }}
        run: |
          if [ "$HAS_TOKEN" = "true" ]; then
            echo "token=true" >> "$GITHUB_OUTPUT"
          else
            echo "token=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run Snyk to check for vulnerabilities
        if: steps.snyk-token.outputs.token == 'true'
        uses: snyk/actions/node@v3
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output="snyk-results.sarif"

      - name: Skip Snyk scan (token missing)
        if: steps.snyk-token.outputs.token != 'true'
        run: echo "Snyk scan skipped because SNYK_TOKEN is not configured."

      - name: Upload Snyk results
        if: steps.snyk-token.outputs.token == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: snyk-results
          path: snyk-results.sarif

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "StreamVault"
          path: "."
          format: "HTML"
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload dependency check results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      matrix:
        language: ["javascript"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@v3
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs:
      [npm-audit, dependency-check, snyk-scan, codeql-analysis, secret-scan]
    if: always()

    steps:
      - name: Download all artifacts
        if: always()
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          path: security-artifacts

      - name: Generate security summary
        env:
          NPM_AUDIT_RESULT: ${{ needs.npm-audit.result }}
          DEP_CHECK_RESULT: ${{ needs['dependency-check'].result }}
          SNYK_RESULT: ${{ needs['snyk-scan'].result }}
          SNYK_TOKEN_AVAILABLE: ${{ needs['snyk-scan'].outputs.token_available }}
          CODEQL_RESULT: ${{ needs['codeql-analysis'].result }}
          SECRET_SCAN_RESULT: ${{ needs['secret-scan'].result }}
        run: |
          echo "# Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          format_status() {
            local label="$1"
            local status="$2"
            local note="$3"
            local icon="❌"

            if [ "$status" = "success" ]; then
              icon="✅"
            elif [ "$status" = "skipped" ]; then
              icon="⚠️"
            fi

            echo "- ${icon} ${label} (${status})${note}" >> $GITHUB_STEP_SUMMARY
          }

          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          format_status "NPM Audit" "$NPM_AUDIT_RESULT" ""
          format_status "OWASP Dependency Check" "$DEP_CHECK_RESULT" ""

          if [ "$SNYK_RESULT" = "skipped" ] && [ "$SNYK_TOKEN_AVAILABLE" != "true" ]; then
            format_status "Snyk Scan" "$SNYK_RESULT" " – skipped (missing SNYK_TOKEN)"
          else
            format_status "Snyk Scan" "$SNYK_RESULT" ""
          fi

          format_status "CodeQL Analysis" "$CODEQL_RESULT" ""
          format_status "TruffleHog Secret Scan" "$SECRET_SCAN_RESULT" ""

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts saved under ./security-artifacts (if available)." >> $GITHUB_STEP_SUMMARY
          echo "Review GitHub Security tab for CodeQL alerts." >> $GITHUB_STEP_SUMMARY
